3151. Special Array I
class Solution:
    def isArraySpecial(self, nums: List[int]) -> bool:
        for i in range(len(nums)-1):
            if nums[i]%2 == nums[i+1]%2:
                return False
        return True

1752. Check if Array Is Sorted and Rotated
class Solution:
    def check(self, nums: List[int]) -> bool:
        c=0
        n=len(nums)
        for i in range(n):
            if nums[i]>nums[(i+1)%n]:
                c+=1
        if c>1:
            return False
        return True
3105. Longest Strictly Increasing or Strictly Decreasing Subarray
class Solution:
    def longestMonotonicSubarray(self, nums: List[int]) -> int:
        c=1
        r=1
        inc=0
        for i in range(1,len(nums)):
            if nums[i-1]<nums[i]:
                if inc>0:
                    c+=1
                else:
                    c=2
                    inc=1
            elif nums[i-1]>nums[i]:
                if inc<0:
                    c+=1
                else:
                    c=2
                    inc=-1
            else:
                c=1
                inc=0
            r=max(r,c)
        return r
1800. Maximum Ascending Subarray Sum
class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        c=nums[0]
        r=c
        for i in range(1,len(nums)):
            if not (nums[i-1]<nums[i]):
                c=0
            c+=nums[i]
            r=max(r,c)
        return r
1790. Check if One String Swap Can Make Strings Equal
class Solution:
    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        ind=[]
        for i in range(len(s1)):
            if s1[i]!=s2[i]:
                ind.append(i)
            if len(ind)>2:
                return False
        if len(ind)==2:
            i,j=ind
            return s1[i]==s2[j] and s1[j]==s2[i]
        return len(ind)==0




