3151. Special Array I
class Solution:
    def isArraySpecial(self, nums: List[int]) -> bool:
        for i in range(len(nums)-1):
            if nums[i]%2 == nums[i+1]%2:
                return False
        return True

1752. Check if Array Is Sorted and Rotated
class Solution:
    def check(self, nums: List[int]) -> bool:
        c=0
        n=len(nums)
        for i in range(n):
            if nums[i]>nums[(i+1)%n]:
                c+=1
        if c>1:
            return False
        return True
3105. Longest Strictly Increasing or Strictly Decreasing Subarray
class Solution:
    def longestMonotonicSubarray(self, nums: List[int]) -> int:
        c=1
        r=1
        inc=0
        for i in range(1,len(nums)):
            if nums[i-1]<nums[i]:
                if inc>0:
                    c+=1
                else:
                    c=2
                    inc=1
            elif nums[i-1]>nums[i]:
                if inc<0:
                    c+=1
                else:
                    c=2
                    inc=-1
            else:
                c=1
                inc=0
            r=max(r,c)
        return r
1800. Maximum Ascending Subarray Sum
class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        c=nums[0]
        r=c
        for i in range(1,len(nums)):
            if not (nums[i-1]<nums[i]):
                c=0
            c+=nums[i]
            r=max(r,c)
        return r
1790. Check if One String Swap Can Make Strings Equal
class Solution:
    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        ind=[]
        for i in range(len(s1)):
            if s1[i]!=s2[i]:
                ind.append(i)
            if len(ind)>2:
                return False
        if len(ind)==2:
            i,j=ind
            return s1[i]==s2[j] and s1[j]==s2[i]
        return len(ind)==0

1726. Tuple with Same Product
class Solution:
    def tupleSameProduct(self, nums: List[int]) -> int:
        d={}
        a=0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                p=nums[i]*nums[j]

                if p in d:
                    a+=(d[p]*8)
                    d[p]+=1
                else:
                    d[p]=1
        return a

3160. Find the Number of Distinct Colors Among the Balls
class Solution:
    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:
        n=len(queries)
        ans=[0]*n
        mp={}
        color=defaultdict(int)
        i=0
        for x, c in queries:
            if x in mp:
                c0=mp[x]
                color[c0]-=1
                if color[c0]==0:
                    color.pop(c0)
            mp[x]=c
            color[c]+=1
            ans[i]=len(color)
            i+=1
        return ans
        
2349. Design a Number Container System
class NumberContainers:

    def __init__(self):
        self.mp={}
        self.idx=defaultdict(list)

    def change(self, index: int, number: int) -> None:
        self.mp[index]=number
        heappush(self.idx[number], index)
        

    def find(self, number: int) -> int:
        if number not in self.idx:
            return -1
        while self.idx[number]:
            i=self.idx[number][0]
            if self.mp[i]==number: return i
            heappop(self.idx[number])
        return -1
--- 9-2-2025
3174. Clear Digits
class Solution:
    def clearDigits(self, s: str) -> str:
        k=0
        s=list(s)
        for i,c in enumerate(s):
            if c.isdigit() and k>0:
                k-=1
            else:
                s[k]=c
                k+=1
        s=s[:k]
        return "".join(s) 
1910. Remove All Occurrences of a Substring
class Solution:
    def removeOccurrences(self, s: str, part: str) -> str:
        while part in s:
            s=s.replace(part,"",1)
        return s
2342. Max Sum of a Pair With Equal Sum of Digits
class Solution:
    def maximumSum(self, nums: List[int]) -> int:
        def sum_digit(i):
            sum=0
            while(i):
                sum+=i%10
                i//=10
            return sum
        pairs=[]
        for n in nums:
            sum=sum_digit(n)
            pairs.append((sum,n))
        pairs.sort()
        max_sum=-1
        for i in range(1,len(nums)):
            if pairs[i][0]==pairs[i-1][0]:
                present=pairs[i][1]+pairs[i-1][1]
                max_sum=max(max_sum,present)
        return max_sum
        
        


