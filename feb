3151. Special Array I
class Solution:
    def isArraySpecial(self, nums: List[int]) -> bool:
        for i in range(len(nums)-1):
            if nums[i]%2 == nums[i+1]%2:
                return False
        return True

1752. Check if Array Is Sorted and Rotated
class Solution:
    def check(self, nums: List[int]) -> bool:
        c=0
        n=len(nums)
        for i in range(n):
            if nums[i]>nums[(i+1)%n]:
                c+=1
        if c>1:
            return False
        return True
3105. Longest Strictly Increasing or Strictly Decreasing Subarray
class Solution:
    def longestMonotonicSubarray(self, nums: List[int]) -> int:
        c=1
        r=1
        inc=0
        for i in range(1,len(nums)):
            if nums[i-1]<nums[i]:
                if inc>0:
                    c+=1
                else:
                    c=2
                    inc=1
            elif nums[i-1]>nums[i]:
                if inc<0:
                    c+=1
                else:
                    c=2
                    inc=-1
            else:
                c=1
                inc=0
            r=max(r,c)
        return r
1800. Maximum Ascending Subarray Sum
class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        c=nums[0]
        r=c
        for i in range(1,len(nums)):
            if not (nums[i-1]<nums[i]):
                c=0
            c+=nums[i]
            r=max(r,c)
        return r
1790. Check if One String Swap Can Make Strings Equal
class Solution:
    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        ind=[]
        for i in range(len(s1)):
            if s1[i]!=s2[i]:
                ind.append(i)
            if len(ind)>2:
                return False
        if len(ind)==2:
            i,j=ind
            return s1[i]==s2[j] and s1[j]==s2[i]
        return len(ind)==0

1726. Tuple with Same Product
class Solution:
    def tupleSameProduct(self, nums: List[int]) -> int:
        d={}
        a=0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                p=nums[i]*nums[j]

                if p in d:
                    a+=(d[p]*8)
                    d[p]+=1
                else:
                    d[p]=1
        return a

3160. Find the Number of Distinct Colors Among the Balls
class Solution:
    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:
        n=len(queries)
        ans=[0]*n
        mp={}
        color=defaultdict(int)
        i=0
        for x, c in queries:
            if x in mp:
                c0=mp[x]
                color[c0]-=1
                if color[c0]==0:
                    color.pop(c0)
            mp[x]=c
            color[c]+=1
            ans[i]=len(color)
            i+=1
        return ans
        
2349. Design a Number Container System
class NumberContainers:

    def __init__(self):
        self.mp={}
        self.idx=defaultdict(list)

    def change(self, index: int, number: int) -> None:
        self.mp[index]=number
        heappush(self.idx[number], index)
        

    def find(self, number: int) -> int:
        if number not in self.idx:
            return -1
        while self.idx[number]:
            i=self.idx[number][0]
            if self.mp[i]==number: return i
            heappop(self.idx[number])
        return -1
--- 9-2-2025
3174. Clear Digits
class Solution:
    def clearDigits(self, s: str) -> str:
        k=0
        s=list(s)
        for i,c in enumerate(s):
            if c.isdigit() and k>0:
                k-=1
            else:
                s[k]=c
                k+=1
        s=s[:k]
        return "".join(s) 
1910. Remove All Occurrences of a Substring
class Solution:
    def removeOccurrences(self, s: str, part: str) -> str:
        while part in s:
            s=s.replace(part,"",1)
        return s
2342. Max Sum of a Pair With Equal Sum of Digits
class Solution:
    def maximumSum(self, nums: List[int]) -> int:
        def sum_digit(i):
            sum=0
            while(i):
                sum+=i%10
                i//=10
            return sum
        pairs=[]
        for n in nums:
            sum=sum_digit(n)
            pairs.append((sum,n))
        pairs.sort()
        max_sum=-1
        for i in range(1,len(nums)):
            if pairs[i][0]==pairs[i-1][0]:
                present=pairs[i][1]+pairs[i-1][1]
                max_sum=max(max_sum,present)
        return max_sum
3066. Minimum Operations to Exceed Threshold Value II

class Solution(object):
    def minOperations(self, nums, k):
        heapq.heapify(nums)
        res=0

        for i in range(0, len(nums)):
            x=heapq.heappop(nums)
            if x<k:
                res+=1
                y=heapq.heappop(nums)
                val= x*2+y if (x<y) else y*2+x
                heapq.heappush(nums, val)
            else:
                break

        return res

1352. Product of the Last K Numbers
class ProductOfNumbers:

    def __init__(self):
        self.product=[1]
        self.n=1

    def add(self, num: int) -> None:
        if num==0:
            self.product=[1]
            self.n=1
        else:
            self.product.append(self.product[-1]*num)
            self.n+=1

    def getProduct(self, k: int) -> int:
        if self.n<=k:
            return 0
        else:
            return self.product[-1]//self.product[-k-1]
        


# Your ProductOfNumbers object will be instantiated and called as such:
# obj = ProductOfNumbers()
# obj.add(num)
# param_2 = obj.getProduct(k)

2698. Find the Punishment Number of an Integer
class Solution:
    def punishmentNumber(self, n: int) -> int:
        arr = [1,9,10,36,45,55,82,91,99,100,235,297,369,370,379,414,
               657,675,703,756,792,909,918,945,964,990,991,999,1000]
        
        total = 0
        for num in arr:
            if num <= n:
                total += num * num
            else:
                break
        return total
1718. Construct the Lexicographically Largest Valid Sequence
class Solution:
    def constructDistancedSequence(self, n: int) -> List[int]:
        len_seq = 2 * n - 1
        seq = [0] * len_seq 
        used = set() 
        def backtrack(i):
            if i == len_seq: return True 
            if seq[i]: return backtrack(i + 1) 

            for num in range(n, 0, -1): 
                if num in used: continue 

                nxt = i + num if num > 1 else i 

                if nxt >= len_seq or seq[nxt] != 0: continue 
                
                seq[i] = seq[nxt] = num 
                used.add(num)

                if backtrack(i + 1): 
                    return True

                seq[i] = seq[nxt] = 0 
                used.remove(num)

            return False 

        backtrack(0)
        return seq 
1079. Letter Tile Possibilities
class Solution:
    def numTilePossibilities(self, tiles: str) -> int:
        return len(set(p for i in range(1, len(tiles)+1) for p in permutations(tiles, i)))
2375. Construct Smallest Number From DI String
class Solution:
    def smallestNumber(self, pattern: str) -> str:
        stack = ['', '1']  
        prev = pattern[0] 
        for num, i in enumerate(pattern + 'S', 2): 
            if i != prev: 
                if prev == 'D': 
                    stack[-2] = stack[-2][:-1] + stack[-1][::-1]
                else:  
                    stack[-2] = stack[-2][:-1] + stack[-1]
                stack[-1] = stack[-2][-1] + str(num)
                prev = i
            else:
                stack[-1] += str(num)
        
        return stack[0] 
1415. The k-th Lexicographical String of All Happy Strings of Length n
class Solution:
    def getHappyString(self, n: int, k: int) -> str:
        count = 0 
        def backtrack(i, chars):
            nonlocal count
            if i == n: 
                count += 1 
                return "".join(chars) if count == k else ""    
            for c in "abc": 
                if chars and chars[-1] == c: continue 
                res = backtrack(i + 1, chars + [c]) 
                if res:
                    return res 
            return ""     
        return backtrack(0, [])
1980. Find Unique Binary String
class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
        r=[]
        for i in range(0,len(nums)):
            if nums[i][i]=='0':
                r.append('1')
            else:
                r.append('0')
        return "".join(r)
1261. Find Elements in a Contaminated Binary Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class FindElements:

    def __init__(self, root: Optional[TreeNode]):
        self.hasX=set()
        def bfs(root):
            q=deque()
            root.val=0
            q.append(root)

            while q:
                node=q.popleft()
                x=node.val
                self.hasX.add(x)

                if node.left:
                    node.left.val=2*x+1
                    q.append(node.left)
                if node.right:
                    node.right.val=2*x+2
                    q.append(node.right)
        bfs(root)
        

    def find(self, target: int) -> bool:
        return target in self.hasX
        


# Your FindElements object will be instantiated and called as such:
# obj = FindElements(root)
# param_1 = obj.find(target)

1028. Recover a Tree From Preorder Traversal
class Solution:
    def recoverFromPreorder(self, traversal: str) -> Optional[TreeNode]:
        nodes = [(len(node[1]), int(node[2])) for node in re.findall("((-*)(\d+))", traversal)][::-1]
        def makeTree(depth): 
            if not nodes or depth != nodes[-1][0]: return None 
            node = TreeNode(nodes.pop()[1])
            node.left = makeTree(depth + 1)  
            node.right = makeTree(depth + 1)

            return node

        return makeTree(0) 
889. Construct Binary Tree from Preorder and Postorder Traversal
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def constructFromPrePost(self, preorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        if not preorder and not postorder:
            return None
        root=TreeNode(preorder[0])
        if len(preorder)==1:
            return root
        left_root_val=preorder[1]
        left_subtree_size=postorder.index(left_root_val)+1
        root.left=self.constructFromPrePost(preorder[1:left_subtree_size+1],postorder[:left_subtree_size])
        root.right=self.constructFromPrePost(preorder[left_subtree_size+1:],postorder[left_subtree_size:-1])
        return root
2467. Most Profitable Path in a Tree
class Solution:
    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:
        n=len(edges)+1
        adj=[[] for _ in range(n)]
        parent=[-1]*n
        Bob=[float('inf')]*n 

        for u, v in edges:
            adj[u].append(v)
            adj[v].append(u)
        def dfs(i, p):
            parent[i] = p
            for j in adj[i]:
                if j == p: continue
                dfs(j, i)

        dfs(0, -1)  
        x=bob
        move=0
        while x!=-1:
            Bob[x]=move
            move+=1
            x=parent[x]
        def dfs_sum(i, dist, prev):
            alice=0
            if dist < Bob[i]:
                alice=amount[i]  
            elif dist==Bob[i]:
                alice=amount[i]//2  

            isLeaf=True
            maxLeafSum=-float('inf')

            for j in adj[i]:
                if j == prev: continue
                isLeaf=False
                maxLeafSum = max(maxLeafSum, dfs_sum(j, dist+1, i))

            return alice if isLeaf else alice + maxLeafSum

        return dfs_sum(0, 0, -1)
1524. Number of Sub-arrays With Odd Sum
class Solution:
    def numOfSubarrays(self, arr: List[int]) -> int:
        sum_is_odd=0
        cnt=[1, 0]
        ans=0
        for x in arr:
            sum_is_odd^=(x&1)
            ans+=cnt[1-sum_is_odd]
            cnt[sum_is_odd]+=1
        return ans%(10**9+7)  
        
1524. Number of Sub-arrays With Odd Sum
class Solution:
    def numOfSubarrays(self, arr: List[int]) -> int:
        sum_is_odd=0
        cnt=[1, 0]
        ans=0
        for x in arr:
            sum_is_odd^=(x&1)
            ans+=cnt[1-sum_is_odd]
            cnt[sum_is_odd]+=1
        return ans%(10**9+7)
1749. Maximum Absolute Sum of Any Subarray
class Solution:
    def maxAbsoluteSum(self, nums: List[int]) -> int:
        return max(0, max(K:=list(accumulate(nums))))-min(0, min(K))
873. Length of Longest Fibonacci Subsequence
class Solution:
    def lenLongestFibSubseq(self, arr: List[int]) -> int:
        fib_lens = {}
        set_arr = set(arr) 

        for b, c in combinations(arr, 2):
            a = c - b 
            if a < b and a in set_arr: 
                fib_lens[(b, c)] = fib_lens.get((a, b), 2) + 1
                
        return max(fib_lens.values(), default = 0) 
1092. Shortest Common Supersequence 
class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        m, n = len(str1), len(str2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if str1[i - 1] == str2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        i, j = m, n
        scs = []
    
        while i > 0 or j > 0:
            if i > 0 and j > 0 and str1[i - 1] == str2[j - 1]:  
                scs.append(str1[i - 1])
                i -= 1
                j -= 1
            elif i > 0 and (j == 0 or dp[i - 1][j] >= dp[i][j - 1]): 
                scs.append(str1[i - 1])
                i -= 1
            else: 
                scs.append(str2[j - 1])
                j -= 1
    
        scs.reverse()
        return "".join(scs)     
2460. Apply Operations to an Array
class Solution:
    def applyOperations(self, nums: List[int]) -> List[int]:
        n, i=len(nums), 0
        while i<n-1:
            if nums[i]==nums[i+1]:
                nums[i], nums[i+1]=nums[i]<<1, 0
                i+=1
            i+=1
        j=0
        for x  in nums:
            if x>0:
                nums[j]=x
                j+=1
        nums[j:]=[0]*(n-j)
        return nums
2570. Merge Two 2D Arrays by Summing Values
class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        d={}
        for i in nums1:
            if i[0] not in d:
                d[i[0]]=i[1]
            else:
                d[i[0]]+=i[1]
        for i in nums2:
            if i[0] not in d:
                d[i[0]]=i[1]
            else:
                d[i[0]]+=i[1]
        ans=[]
        # print(d)
        for i in sorted(d.keys()):
            l=[]
            l.append(i)
            l.append(d[i])
            ans.append(l)

        return ans
2161. Partition Array According to Given Pivot
class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        x=[]
        y=[]
        z=[]
        for i in nums:
            if i==pivot:
                z.append(i) 
            elif i<pivot:
                x.append(i)
            else :
                y.append(i)
        return x+z+y
1780. Check if Number is a Sum of Powers of Three
class Solution:
    def checkPowersOfThree(self, n: int) -> bool:
        while n>0:
            q, r=divmod(n, 3)
            if r==2: return False
            n=q
        return True
2579. Count Total Number of Colored Cells
class Solution:
    def coloredCells(self, n: int) -> int:
        return 2*n*(n-1)+1
2965. Find Missing and Repeated Values
class Solution:
    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:
        n = len(grid)
        missing = (n * n) * (1 + n * n) // 2 
        seen = set() 
        duplicate = -1
        for row in grid:
            for num in row:
                if num not in seen:
                    seen.add(num)
                    missing -= num 
                else:
                    duplicate = num
                    
        return [duplicate, missing]
        

          
        
       
        
        
        
        
        
        
        


        


